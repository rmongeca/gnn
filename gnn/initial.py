"""Initial layer for GNN to construct hidden states."""
import tensorflow as _tf


class DenseInitializer(_tf.keras.layers.Layer):
    """Initial hidden state generated from a Dense layer for Message Passing Network."""

    def __init__(self, hidden_state_size=10, *args, **kwargs):
        super(DenseInitializer, self).__init__(*args, **kwargs)
        self.hidden_state_size = hidden_state_size
        # Init inner layers
        self.init = _tf.keras.layers.Dense(units=hidden_state_size, name="initializer-dense")

    def call(self, node_features, training=None):
        return self.init(node_features, training=training)


class PadInitializer(_tf.keras.layers.Layer):
    """Initial hidden state generated by constant padding for Message Passing Network.

    This inititalizer layer takes the node features and pads them with the given pad_value, which
    defaults to 0, until hidden_state_size reached.
    """

    def __init__(self, hidden_state_size=10, pad_value=0, *args, **kwargs):
        super(PadInitializer, self).__init__(*args, **kwargs)
        self.hidden_state_size = hidden_state_size
        self.pad_value = pad_value

    def call(self, node_features, training=None):
        pad_dims = self.hidden_state_size - _tf.shape(node_features)[2]
        paddings = _tf.convert_to_tensor([[0, 0], [0, 0], [0, pad_dims]])
        return _tf.pad(
            node_features, paddings, constant_values=self.pad_value, name="initializer-pad")
